<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

   <!-- in-memory database and a datasource -->
	<context:property-placeholder ignore-resource-not-found="true" ignore-unresolvable="true"
                                  location="classpath:jdbc.properties" />

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}${jdbc.schema}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
        <property name="validationQuery" value="select 1" />
    </bean>
	
	<!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
	<!-- 通过Spring的自动代理(autoproxy)功能为指定范围的bean添加制定的服务 -->
	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<value>*Services</value>
		</property>
		<!--系统自动添加的服务列表-->
		<property name="interceptorNames">
			<list>
				<!--必须的拦截器/通知-->
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>
	
	<!--事务处理拦截器的定义-->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
		<props>
		<!--CRUD(create/read/update/delete) except 'R'-->
				<!--'C'-->
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="register*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<!--'U'-->
				<prop key="set*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
				<!--'D'-->
				<prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="clear*">PROPAGATION_REQUIRED,-Exception</prop>
				<!-- r -->
				<prop key="search*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="select*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="count*">PROPAGATION_SUPPORTS,readOnly</prop>
		</props>
		</property>
	</bean>
    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->  
  
    <context:component-scan base-package="com.edupay.**.service" />

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory, notice that configLocation is not needed when you use MapperFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>

    <!--配置扫描器，将Mybatis接口的实现加入到ioc容器 -->  
    <!-- 使用通用Mapper，见：https://mapperhelper.github.io/docs/1.integration/ -->  
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">  
		<property name="basePackage" value="com.edupay.**.dao" />  
	</bean>
    
    <bean id="taskExecutor"
		  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5"/>
		<property name="maxPoolSize" value="5000"/>
		<property name="queueCapacity" value="100000"/>
		<property name="keepAliveSeconds" value="6000"/>
	</bean>
	
</beans>
